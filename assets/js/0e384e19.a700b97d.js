"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Getting started",l={unversionedId:"intro",id:"intro",title:"Getting started",description:"Note: This tutorial assumes you already have a graphql schema and client in place. If you'd like to create a new app, please see this guide",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/typed-graphql-builder/documentation/tree/main/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Clients",permalink:"/docs/category/clients"}},s={},p=[{value:"Generating the API",id:"generating-the-api",level:2},{value:"Writing queries",id:"writing-queries",level:2},{value:"Using queries",id:"using-queries",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting started"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: This tutorial assumes you already have a graphql schema and client in place. If you'd like to create a new app, ",(0,a.kt)("a",{parentName:"p",href:"/docs/sample-app"},"please see this guide"))),(0,a.kt)("h2",{id:"generating-the-api"},"Generating the API"),(0,a.kt)("p",null,"The easiest way to try ",(0,a.kt)("inlineCode",{parentName:"p"},"typed-graphql-builder")," is to use ",(0,a.kt)("inlineCode",{parentName:"p"},"npx"),". Lets generate a TypeScript API\nfrom the example countries schema schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx typed-graphql-builder \\\n  --schema https://raw.githubusercontent.com/typed-graphql-builder/typed-graphql-builder/main/examples/countries-schema.graphql \\\n  --output generated-api.ts\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: You can pass a path to a local schema file or an URL")),(0,a.kt)("p",null,"The above command will take the schema and generate a file ",(0,a.kt)("inlineCode",{parentName:"p"},"generated-api.ts"),". You can use this generated API to build type-safe queries against the specified schema."),(0,a.kt)("p",null,"The API depends on two small dependencies, so you should add them to ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"dependencies": {\n  "@graphql-typed-document-node/core": "^3.1.1",\n  "graphql-tag": "^2.12.6",\n}\n')),(0,a.kt)("p",null,"Now you can use the query builder in your app by importing ",(0,a.kt)("inlineCode",{parentName:"p"},"./generated-api.ts"),"."),(0,a.kt)("h2",{id:"writing-queries"},"Writing queries"),(0,a.kt)("p",null,"Lets write a sample query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { query } from "./generated-api"\n\nconst continentQuery = query(q => [\n  q.continents({}, c => [\n    //\n    c.name,\n    c.code,\n  ]),\n])\n')),(0,a.kt)("p",null,"This will generate a query of type ",(0,a.kt)("inlineCode",{parentName:"p"},"TypedDocumentNode<{continents: Array<{name: string, country: string}>}, {}>")," which corresponds to the following GraphQL query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  continents {\n    name\n    code\n  }\n}\n")),(0,a.kt)("p",null,"Now if we wanted to add a query that takes the continent code as input and returns a list of\ncountries on that continent, we can do the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { $, query } from "../countries-schema"\n\nconst countryQuery = query(q => [\n  q.countries({ filter: { continent: { eq: $("continentCode") } } }, c => [\n    c.code,\n    c.capital,\n    c.name,\n    c.languages(l => [l.name]),\n  ]),\n])\n')),(0,a.kt)("p",null,"This will generate ",(0,a.kt)("inlineCode",{parentName:"p"},"TypedDocumentNode<{ countries: Array<{...}>}, { continentCode: string }>"),", a typed document node that includes the input variable ",(0,a.kt)("inlineCode",{parentName:"p"},"continentCode"),"."),(0,a.kt)("p",null,"The GraphQL version of the above query is shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query ($continentCode: String) {\n  countries(filter: { continent: { eq: $continentCode } }) {\n    code\n    capital\n    name\n    languages {\n      name\n    }\n  }\n}\n")),(0,a.kt)("h2",{id:"using-queries"},"Using queries"),(0,a.kt)("p",null,"The queries written above can be used in a component. For example, if using Apollo's ",(0,a.kt)("inlineCode",{parentName:"p"},"useQuery"),", we would write the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const CountryListComponent = () => {\n  const continents = useQuery(continentQuery)\n  const [continent, setContinent] = useState("EU")\n\n  const countryList = useQuery(countryQuery, {\n    variables: {\n      continent,\n    },\n  })\n\n  // render the country list here\n}\n')),(0,a.kt)("p",null,"That's it! Feel free to explore the generated API further"))}u.isMDXComponent=!0}}]);