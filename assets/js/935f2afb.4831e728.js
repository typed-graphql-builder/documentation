"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting started","href":"/docs/intro","docId":"intro"},{"type":"category","label":"Clients","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Apollo","href":"/docs/clients/apollo","docId":"clients/apollo"},{"type":"link","label":"Graphql Request","href":"/docs/clients/graphql-request","docId":"clients/graphql-request"},{"type":"link","label":"urql","href":"/docs/clients/urql","docId":"clients/urql"}],"href":"/docs/category/clients"},{"type":"category","label":"Query Syntax","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Aliases","href":"/docs/query-syntax/aliases","docId":"query-syntax/aliases"},{"type":"link","label":"Fields and field helpers","href":"/docs/query-syntax/fields","docId":"query-syntax/fields"},{"type":"link","label":"Interfaces","href":"/docs/query-syntax/interfaces","docId":"query-syntax/interfaces"},{"type":"link","label":"Named query","href":"/docs/query-syntax/named-query","docId":"query-syntax/named-query"},{"type":"link","label":"Schema roots","href":"/docs/query-syntax/schema-root","docId":"query-syntax/schema-root"},{"type":"link","label":"Unions","href":"/docs/query-syntax/unions","docId":"query-syntax/unions"},{"type":"link","label":"Variables","href":"/docs/query-syntax/variables","docId":"query-syntax/variables"}],"href":"/docs/category/query-syntax"},{"type":"link","label":"Custom scalars","href":"/docs/custom-scalars","docId":"custom-scalars"},{"type":"link","label":"Comparison with other clients","href":"/docs/comparison","docId":"comparison"},{"type":"link","label":"Tips","href":"/docs/tips","docId":"tips"},{"type":"link","label":"Complex example","href":"/docs/complex-example","docId":"complex-example"}]},"docs":{"clients/apollo":{"id":"clients/apollo","title":"Apollo","description":"Apollo Client is a comprehensive state management library for JavaScript that enables you to manage both local and remote data with GraphQL. Use it to fetch, cache, and modify application data, all while automatically updating your UI.","sidebar":"tutorialSidebar"},"clients/graphql-request":{"id":"clients/graphql-request","title":"Graphql Request","description":"GraphQL Request is a minimal and lightweight GraphQL client that comes as a native ES6 module and has first class TypeScript support.","sidebar":"tutorialSidebar"},"clients/urql":{"id":"clients/urql","title":"urql","description":"urql is a highly customizable and versatile GraphQL client with which you add on features like normalized caching as you grow. It\'s built to be both easy to use for newcomers to GraphQL, and extensible, to grow to support dynamic single-app applications and highly customized GraphQL infrastructure. In short, urql prioritizes usability and adaptability.","sidebar":"tutorialSidebar"},"comparison":{"id":"comparison","title":"Comparison with other clients","description":"This page compares typed-graphql-builder with [Zeus] and [tql], as those were the two libraries that served as the primary inspiration.","sidebar":"tutorialSidebar"},"complex-example":{"id":"complex-example","title":"Complex example","description":"This example is based on a large example schema generated from a Hasura instance with many tables.","sidebar":"tutorialSidebar"},"custom-scalars":{"id":"custom-scalars","title":"Custom scalars","description":"Custom scalars are supported through the --scalar CLI option.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Getting started","description":"The easiest way to try typed-graphql-builder is to use npx. Lets generate a TypeScript API","sidebar":"tutorialSidebar"},"query-syntax/aliases":{"id":"query-syntax/aliases","title":"Aliases","description":"Aliases are supported via the .as method - any field (including methods) can be renamed by","sidebar":"tutorialSidebar"},"query-syntax/fields":{"id":"query-syntax/fields","title":"Fields and field helpers","description":"The standard syntax to select fields is to add them to the returned list result.","sidebar":"tutorialSidebar"},"query-syntax/interfaces":{"id":"query-syntax/interfaces","title":"Interfaces","description":"Notes on unions and inheritance","sidebar":"tutorialSidebar"},"query-syntax/named-query":{"id":"query-syntax/named-query","title":"Named query","description":"For debugging and metric purposes, its useful to be able to give your query a name.","sidebar":"tutorialSidebar"},"query-syntax/schema-root":{"id":"query-syntax/schema-root","title":"Schema roots","description":"The schema roots for queries, mutations and subscriptions can be accessed using the query, mutation and subscription functions.","sidebar":"tutorialSidebar"},"query-syntax/unions":{"id":"query-syntax/unions","title":"Unions","description":"","sidebar":"tutorialSidebar"},"query-syntax/variables":{"id":"query-syntax/variables","title":"Variables","description":"typed-graphql-builder is capable of inferring the type of a variable based on its position in the","sidebar":"tutorialSidebar"},"tips":{"id":"tips","title":"Tips","description":"","sidebar":"tutorialSidebar"}}}')}}]);