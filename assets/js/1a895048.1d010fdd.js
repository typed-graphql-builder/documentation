"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[49],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(f,l(l({ref:t},s),{},{components:n})):o.createElement(f,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1130:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={title:"Apollo"},l=void 0,i={unversionedId:"clients/apollo",id:"clients/apollo",title:"Apollo",description:"Apollo Client is a comprehensive state management library for JavaScript that enables you to manage both local and remote data with GraphQL. Use it to fetch, cache, and modify application data, all while automatically updating your UI.",source:"@site/docs/clients/apollo.md",sourceDirName:"clients",slug:"/clients/apollo",permalink:"/docs/clients/apollo",draft:!1,editUrl:"https://github.com/typed-graphql-builder/documentation/tree/main/docs/docs/clients/apollo.md",tags:[],version:"current",frontMatter:{title:"Apollo"},sidebar:"tutorialSidebar",previous:{title:"Clients",permalink:"/docs/category/clients"},next:{title:"Graphql Request",permalink:"/docs/clients/graphql-request"}},p={},c=[],s={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/"},"Apollo Client")," is a comprehensive state management library for JavaScript that enables you to manage both local and remote data with GraphQL. Use it to fetch, cache, and modify application data, all while automatically updating your UI.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"typed-graphql-builder")," can easily be used with Apollo Client by substituting the ",(0,r.kt)("inlineCode",{parentName:"p"},"gql")," function\nthat comes with it. Instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"gql")," and passing it a query string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const ADD_TODO = gql`\n  mutation AddTodo($type: String!) {\n    addTodo(type: $type) {\n      id\n      type\n    }\n  }\n`\n")),(0,r.kt)("p",null,"we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"typed-graphql-builder"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { mutation } from "./generated-api"\n\nconst ADD_TODO = mutation(m => [\n  m.addTodo({ type: $("type") }, todo => [\n    //\n    todo.id,\n    todo.type,\n  ]),\n])\n')),(0,r.kt)("p",null,"The type of the variable will be automatically inferred as ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," for us."),(0,r.kt)("p",null,"The mutation can then be used in a component as usual. We can pass additional variables at the\npoint of use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'function AddTodo() {\n  const [todo, setTodo] = useState("")\n  const [addTodo, { data, loading, error }] = useMutation(ADD_TODO)\n\n  if (loading) return "Submitting..."\n  if (error) return `Submission error! ${error.message}`\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          addTodo({ variables: { type: todo } })\n          setTodo("")\n        }}\n      >\n        <input value={todo} onChange={e => setTodo(e.target.value)} />\n        <button type="submit">Add Todo</button>\n      </form>\n    </div>\n  )\n}\n')))}u.isMDXComponent=!0}}]);